// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Faculties.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_faculties");

                    b.ToTable("faculties", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_users_faculty_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Faculties.Faculty", b =>
                {
                    b.OwnsOne("Domain.Faculties.FacultyEquipment", "Equipment", b1 =>
                        {
                            b1.Property<Guid>("FacultyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "type");

                            b1.HasKey("FacultyId");

                            b1.ToTable("faculties");

                            b1.ToJson("equipment");

                            b1.WithOwner()
                                .HasForeignKey("FacultyId")
                                .HasConstraintName("fk_faculties_faculties_id");

                            b1.OwnsOne("Domain.Faculties.MedicalEquipment", "MedicalEquipment", b2 =>
                                {
                                    b2.Property<Guid>("FacultyEquipmentFacultyId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.Property<decimal>("Price")
                                        .HasColumnType("numeric")
                                        .HasAnnotation("Relational:JsonPropertyName", "price");

                                    b2.HasKey("FacultyEquipmentFacultyId");

                                    b2.ToTable("faculties");

                                    b2.ToJson("equipment");

                                    b2.WithOwner()
                                        .HasForeignKey("FacultyEquipmentFacultyId")
                                        .HasConstraintName("fk_faculties_faculties_faculty_equipment_faculty_id");
                                });

                            b1.OwnsOne("Domain.Faculties.TechnicalEquipment", "TechnicalEquipment", b2 =>
                                {
                                    b2.Property<Guid>("FacultyEquipmentFacultyId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.Property<double>("Weight")
                                        .HasColumnType("double precision")
                                        .HasAnnotation("Relational:JsonPropertyName", "weight");

                                    b2.HasKey("FacultyEquipmentFacultyId");

                                    b2.ToTable("faculties");

                                    b2.ToJson("equipment");

                                    b2.WithOwner()
                                        .HasForeignKey("FacultyEquipmentFacultyId")
                                        .HasConstraintName("fk_faculties_faculties_faculty_equipment_faculty_id");

                                    b2.OwnsMany("Domain.Faculties.TechnicalEquipmentPart", "Parts", b3 =>
                                        {
                                            b3.Property<Guid>("TechnicalEquipmentFacultyEquipmentFacultyId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Name")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "name");

                                            b3.HasKey("TechnicalEquipmentFacultyEquipmentFacultyId", "Id");

                                            b3.ToTable("faculties");

                                            b3.ToJson("equipment");

                                            b3.WithOwner()
                                                .HasForeignKey("TechnicalEquipmentFacultyEquipmentFacultyId")
                                                .HasConstraintName("fk_faculties_faculties_technical_equipment_faculty_equipment_facul");
                                        });

                                    b2.Navigation("Parts");
                                });

                            b1.Navigation("MedicalEquipment");

                            b1.Navigation("TechnicalEquipment");
                        });

                    b.Navigation("Equipment")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Faculties.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_faculties_id");

                    b.Navigation("Faculty");
                });
#pragma warning restore 612, 618
        }
    }
}
